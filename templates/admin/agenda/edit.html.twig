{% extends 'admin.html.twig' %}

{% block title %}Modifier l'évènement{% endblock %}

{% block content %}
    <h1>Modifier l'évènement {{ event.title }} - {{ event.start|format_datetime('full', 'short', locale='fr')}}</h1>
    {{ include('admin/agenda/_form.html.twig', {'button_label': 'Mettre à jour'}) }}

    <a href="{{ path('admin_agenda_home') }}" class="btn btn-secondary float-end ms-3">Retour à l'agenda</a>
        <div class="float-end">
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                Supprimer
            </button>
        </div>
        
        <!-- Modal de confirmation de suppression -->
    <div class="modal fade" id="deleteModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmation de suppression</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer cet événement ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <a href="{{ path('admin_agenda_delete_event', {'id': event.id}) }}" class="btn btn-danger">Supprimer</a>
                </div>
            </div>
        </div>
    </div>



        
{% endblock %}




{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/fr.js"></script>
<script>
$(document).ready(function() {
    $('.students-field').select2({
        placeholder: "Choisissez l'élève ou les élèves à qui vous allez faire cours. (Désactivez le bouton si vous faites cours à une classe entière)",
        closeOnSelect: false,
    });

    $('.programmes-field').select2({
        placeholder: "Souhaitez-vous ajouter un/des programme(s) ?",
        closeOnSelect: false,
    });

    $('.lecons-field').select2({
        placeholder: "Souhaitez-vous ajouter une/des leçon(s) ?",
        closeOnSelect: false,
    });
    
    var studentClassSelect = $('#event_form_studentClass');
    var studentsSelect = $('#event_form_students');
    var studentSwitchInput = $('#event_form_studentswitch');
    // Masquer les élèves au chargement de la page
    studentsSelect.next('.select2-container').hide();
    $('.label-students').hide();
    // Afficher la classe par défaut
    studentClassSelect.show();
    $('.label-studentClass').show();
    // Écouter les changements sur le champ switch student
    studentSwitchInput.on('change', function() {
        if ($(this).is(':checked')) {
            studentClassSelect.hide();
            $('.label-studentClass').hide();

            studentsSelect.next('.select2-container').show();
            $('.label-students').show();

            // Vider le champ de la classe et réinitialiser sa valeur
            studentClassSelect.val('').trigger('change');

        } else {
            studentsSelect.next('.select2-container').hide();
            $('.label-students').hide();

            studentClassSelect.show();
            $('.label-studentClass').show();

            // Vider le champ des élèves et réinitialiser sa valeur
            studentsSelect.val(null).trigger('change');
        }
    });

    var zoomLinkSelect = $('#event_form_zoomlink');
    var roomSwitchselect = $('#event_form_room');
    var roomSwitchInput = $('#event_form_zoomswitch');

    // Masquer le zoom au chargement de la page
    zoomLinkSelect.hide();
    $('.label-zoom').hide();

    // Afficher les salles par défaut
    roomSwitchselect.show();
    $('#row-materials').show();
    $('.label-room').show();
    $('.label-materials').show();
    
    // Écouter les changements sur le champ switch room
    roomSwitchInput.on('change', function() {
        if ($(this).is(':checked')) {
            $('.label-room').hide();
            $('.label-materials').hide();
            $('#row-materials').hide();
            roomSwitchselect.hide();

            zoomLinkSelect.show();
            $('.label-zoom').show();

            // Vider le champ de la classe et réinitialiser sa valeur
            roomSwitchselect.val('').trigger('change');
            $('#event_form_materials .form-check-input').prop('checked', false).trigger('change');

        } else {
            zoomLinkSelect.hide();
            $('.label-zoom').hide();

            $('.label-room').show();
            roomSwitchselect.show();
            $('#row-materials').show();
            $('.label-materials').show();

            // Vider le champ des élèves et réinitialiser sa valeur
            zoomLinkSelect.val(null).trigger('change');
        }
    });

    // Ici vous pouvez utiliser les valeurs de event.zoomlink et event.students provenant de Twig
    var hasZoomLink = {% if event.zoomlink is not null %}true{% else %}false{% endif %};
    var hasStudents = {% if event.students is not empty %}true{% else %}false{% endif %};

    // Utiliser les valeurs pour activer ou désactiver les champs appropriés
    if (hasZoomLink) {
        roomSwitchInput.prop('checked', true).trigger('change');
    } 
    if (hasStudents) {
        studentSwitchInput.prop('checked', true).trigger('change');
    }

    flatpickr('.datetimepickr', {
        enableTime: true,
        dateFormat: "Y-m-d H:i",
        time_24hr: true,
        minTime: "00:00",
        maxTime: "23:59",
    });

    var materialsCheckboxes = document.querySelectorAll('.materials-checkboxes input[type="checkbox"]');
    var roomSelect = document.querySelector('.room-select');
    var startField = $('#event_form_start');
    var durationField = $('#event_form_duration');
    var zoomlinkField = $('#event_form_zoomlink');
    // Champ zoomlink

    // Écouter l'événement 'change' sur les champs de matériel et de durée
    materialsCheckboxes.forEach(function(checkbox) {
        checkbox.addEventListener('change', updateRooms);
    });

    durationField.on('input', updateRooms);

    // Écouteur d'événement pour le champ zoomlink
    zoomlinkField.on('input', updateRooms);

    // Fonction pour mettre à jour les salles en fonction des matériaux sélectionnés, de l'heure et de la durée
    function updateRooms() {
        var selectedMaterials = Array.from(materialsCheckboxes).filter(function(checkbox) {
            return checkbox.checked;
        }).map(function(checkbox) {
            return checkbox.value;
        });

        var startValue = startField.val();
        var durationValue = durationField.val();
        var zoomlinkValue = zoomlinkField.val();
        // Récupérer la valeur du champ zoomlink

        // Construire l'URL de l'API avec les paramètres appropriés
        var apiUrl = '/admin/agenda/api/rooms';
        apiUrl += '?materials=' + selectedMaterials.join(',');
        apiUrl += '&start=' + startValue;
        apiUrl += '&duration=' + durationValue;
        apiUrl += '&zoomlink=' + zoomlinkValue;
        // Ajouter la valeur du champ zoomlink

        // Fetch des salles en fonction des équipements sélectionnés, de l'heure et de la durée
        fetch(apiUrl).then(function(response) {
            return response.json();
        }).then(function(rooms) { // Mise à jour des options de sélection de la salle
            while (roomSelect.firstChild) {
                roomSelect.removeChild(roomSelect.firstChild);
            }

            rooms.forEach(function(room) {
                var option = document.createElement('option');
                option.value = room.id;
                option.textContent = room.name;
                roomSelect.appendChild(option);
            });
        }).catch(function(error) {
            console.log(error);
        });
    }

    // Appeler la fonction pour mettre à jour les salles initialement
    updateRooms();

    // Écouteur d'événement pour le champ de l'heure de début
    startField.change(updateRooms);
    $('#event_form_zoomswitch').on('change', updateRooms); // Écouteur sur le champ zoomswitch

    var recurrenceFields = $('#recurrence-fields');
    var isRecurringSelect = $('#event_form_recurrence');

    // Masquer les champs de récurrence au chargement de la page
    recurrenceFields.hide();

    // Écouter les changements sur le champ isRecurring (liste déroulante)
    isRecurringSelect.on('change', function() {
        var selectedValue = $(this).val();

        if (selectedValue === '1') {
            recurrenceFields.show();
        } else {
            recurrenceFields.hide();
        }
    });

    // Appeler la fonction initiale pour vérifier l'état initial de la liste déroulante
    isRecurringSelect.trigger('change');



});
</script>
{% endblock %}
